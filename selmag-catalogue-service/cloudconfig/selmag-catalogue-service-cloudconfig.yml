spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://172.29.32.1:8082/realms/selmag
      client:
        registration:
          keycloak:
            client-id: catalogue-service
            client-secret: 2bB7jlfRDrzlrD6qGVqXDYAJWsoEYaVi
            authorization-grant-type: client_credentials
            scope:
              - metrics_server
          discovery:
            provider: keycloak
            client-id: catalogue-service
            client-secret: 2bB7jlfRDrzlrD6qGVqXDYAJWsoEYaVi
            authorization-grant-type: client_credentials
            scope:
              - discovery
        provider:
          keycloak:
            issuer-uri: http://172.29.32.1:8082/realms/selmag
  datasource:
    url: jdbc:postgresql://localhost:5433/catalogue
    password: catalogue
    username: catalogue
  flyway:
    schemas:
      - public
      - catalogue
  jpa:
    show-sql: true
  boot:
    admin:
      client:
        enabled: false
logging:
  level:
    sql: info
springdoc:
  swagger-ui:
    oauth:
      client-id: catalogue-service-swagger-ui
      use-pkce-with-authorization-code-grant: true
keycloak:
  uri: http://localhost:8082
management: #тут настраиваем информацию, которую хотим чтобы была видна в Spring Boot Admin, настройки ниже насколько я понял, позволяют получить вообще всю информацию о сервисе
  health:
    livenessstate:
      enabled: true #теперь Spring Boot Admin будет видеть живое ли вообще наше приложение
    readinessstate:
      enabled: true #включаем что сервис является читаемым
  endpoints:
    web:
      exposure:
        include: '*' #делаем все эндпоинты видными для Spring Boot Admin
  zipkin:
    tracing:
      endpoint: http://172.29.32.1:9411/api/v2/spans #адрес в который сохраняем трасировки
  tracing:
    sampling:
      probability: 1.0
eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
